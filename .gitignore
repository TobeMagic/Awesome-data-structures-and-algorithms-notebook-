# baby
**/girlfriend/*
/学习资料

# 忽略操作系统生成的文件
.DS_Store
Thumbs.db

# 忽略编辑器和IDE生成的文件
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# 忽略编译生成的文件和文件夹
/build/
/dist/

# 忽略依赖文件夹
/node_modules/
/bower_components/

# 忽略日志文件
*.log

# 忽略临时文件
*.tmp

# 忽略系统文件
.DS_Store
desktop.ini

# 忽略压缩文件
*.zip
*.rar
*.gz

# 忽略数据库文件
*.db
*.sqlite
*.sqlite3

# 忽略IDE和编辑器配置文件
*.swp
*.swo
*.swn
*.bak

# 忽略生成的文档文件
*.html
*.pdf
*.docx
*.csv
*.pdf 
*.pptx
学习资料/核心资料_电子书/
# 忽略备份文件
*.bak
*.backup

# 忽略缓存文件
.cache/

# 忽略日志文件夹
/logs/

# 忽略临时文件夹
/temp/
/tmp/

# 忽略编译器和构建工具生成的文件
.gradle/
.mvn/
target/

# 忽略Jupyter Notebook生成的文件
.ipynb_checkpoints/

# 忽略环境配置文件
.env

# 忽略IDE生成的文件
*.iml

# 忽略图片缩略图文件夹
/.thumbnails/

# 忽略本地配置文件
*.local

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
